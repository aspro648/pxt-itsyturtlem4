<xml xmlns="https://developers.google.com/blockly/xml"><comment data="0" x="0" y="0" h="120" w="310">Functions to operate the turtle</comment><block type="pxt-on-start" x="10" y="10"><statement name="HANDLER"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace turtleBot {" line1="    let patterns = [[1, 0, 1, 0], [0, 1, 1, 0], [0, 1, 0, 1], [1, 0, 0, 1]]" line2="    let pattern: boolean[] = []" line3="    let steps = 0" line4="    let wheel_dia = 52" line5="    let wheel_base = 74" line6="    let PEN_UP = 90" line7="    let PEN_DOWN = 10" line8="    let rotation = 0" line9="    let degree = 0" line10="    let distance = 0" line11="    let steps_rev = 512 //  512 for 64x gearbox, 128 for 16x gearbox" line12="    let x = 0" line13="    let y = 0" line14="    let _heading = 0    // starts to the right (east) (same as Python)" line15="    let delay_time = 2  // (ms) delay between stepper moves" line16="    let debug = true" line17="" line18="    export function forward(distance: number) {" line19="        // 25 * 512 / (52 * 3.1412)" line20="        steps = Math.round(distance * steps_rev / (wheel_dia * Math.PI))" line21="        if (debug == true) { console.log(&quot;forward(&quot; + distance + &quot;)\n&quot;) }" line22="" line23="        for (let i = 0; i &lt; steps; i++) {" line24="            pattern = [true, false, true, false]" line25="            pins.A2.digitalWrite(pattern[3])" line26="            pins.A3.digitalWrite(pattern[2])" line27="            pins.A4.digitalWrite(pattern[1])" line28="            pins.A5.digitalWrite(pattern[0])" line29="            pins.SCK.digitalWrite(pattern[3])" line30="            pins.MOSI.digitalWrite(pattern[2])" line31="            pins.MISO.digitalWrite(pattern[1])" line32="            pins.D9.digitalWrite(pattern[0])" line33="            basic.pause(delay_time)" line34="            pattern = [false, true, true, false]" line35="            pins.A2.digitalWrite(pattern[3])" line36="            pins.A3.digitalWrite(pattern[2])" line37="            pins.A4.digitalWrite(pattern[1])" line38="            pins.A5.digitalWrite(pattern[0])" line39="            pins.SCK.digitalWrite(pattern[3])" line40="            pins.MOSI.digitalWrite(pattern[2])" line41="            pins.MISO.digitalWrite(pattern[1])" line42="            pins.D9.digitalWrite(pattern[0])" line43="            basic.pause(delay_time)" line44="            pattern = [false, true, false, true]" line45="            pins.A2.digitalWrite(pattern[3])" line46="            pins.A3.digitalWrite(pattern[2])" line47="            pins.A4.digitalWrite(pattern[1])" line48="            pins.A5.digitalWrite(pattern[0])" line49="            pins.SCK.digitalWrite(pattern[3])" line50="            pins.MOSI.digitalWrite(pattern[2])" line51="            pins.MISO.digitalWrite(pattern[1])" line52="            pins.D9.digitalWrite(pattern[0])" line53="            basic.pause(delay_time)" line54="            pattern = [true, false, false, true]" line55="            pins.A2.digitalWrite(pattern[3])" line56="            pins.A3.digitalWrite(pattern[2])" line57="            pins.A4.digitalWrite(pattern[1])" line58="            pins.A5.digitalWrite(pattern[0])" line59="            pins.SCK.digitalWrite(pattern[3])" line60="            pins.MOSI.digitalWrite(pattern[2])" line61="            pins.MISO.digitalWrite(pattern[1])" line62="            pins.D9.digitalWrite(pattern[0])" line63="            basic.pause(delay_time)" line64="        }" line65="        pattern = [false, false, false, false]" line66="        pins.A2.digitalWrite(pattern[3])" line67="        pins.A3.digitalWrite(pattern[2])" line68="        pins.A4.digitalWrite(pattern[1])" line69="        pins.A5.digitalWrite(pattern[0])" line70="        pins.SCK.digitalWrite(pattern[3])" line71="        pins.MOSI.digitalWrite(pattern[2])" line72="        pins.MISO.digitalWrite(pattern[1])" line73="        pins.D9.digitalWrite(pattern[0])" line74="        x = x + distance * Math.cos(_heading * Math.PI / 180)  // must convert to radians" line75="        y = y + distance * Math.sin(_heading * Math.PI / 180)" line76="    }" line77="}" numlines="78"></mutation><comment id="undefined" pinned="false" h="80" w="160">% color=#0b9630 icon="\f188" block="Turtle" groups=['Control', 'Parameters', 'Other']</comment><data>0</data></block></statement></block></xml>